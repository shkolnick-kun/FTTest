#     ___    ____  __    ___   _________
#    /   |  / _  |/ /   / / | / /__  __/           Source Code Static Analyzer
#   / /| | / / / / /   / /  |/ /  / /                   AdLint - Advanced Lint
#  / __  |/ /_/ / /___/ / /|  /  / /
# /_/  |_|_____/_____/_/_/ |_/  /_/   Copyright (C) 2010-2014, OGIS-RI Co.,Ltd.
#
# Traits file generated by adlintize 3.2.14 at 2016-08-17 13:50:37 +0500.

# Schema version of the traits file.
# DO NOT EDIT MANUALLY!
version: "3.0.0"

#Use adlint from Gems!
#Code::Blocks settings (use GCC as template)
#Default commands:

#Compiler(c;C;cxx;CXX;cpp;CPP;cxx;CXX)
#$compiler -t adlint_traits.yml -o obj/adlint $options $file
#Linker
#$linker -t adlint_traits.yml -o bin/adlint $link_options $link_objects

#obj extension: c.met.csv
#Don't use full file names (GDB workaround)

#Regexp:
#Warning: (.*):(.*):(.*):warning:(.*)  file 1, line 2, msg 4
#W0059:   (.*):(.*)::warning:(.*)      file 1, msg 3 
#Context: (.*):(.*):(.*):context:(.*)  file 1, line 2, msg 4
#Error:   (.*):(.*):(.*):error:(.*)    file 1, line 2, msg 4


# List of names of source code examination packages.
#
# "c_builtin" is a builtin source code examination package for C language.
# You can install optional examination packages and append (or replace) this
# list to specify which examination packages are to be run.
exam_packages:
  - "c_builtin"

#
# Project specific traits section
#
project_traits:

  # Project name.
  project_name: "names_work"

  # Project root directory.
  project_root: "."

  # Analysys target selection.
  # Ex.
  #   target_files:
  #     inclusion_paths:
  #       - "../foo"
  #       - "../bar"
  #     exclusion_paths:
  #       - "../bar/baz"
  target_files:
    inclusion_paths:
      - "."
      - ".."
      - "../../../kernel"
      - "../../../kernel/default"
    exclusion_paths:

  # Pathname of the project specific initial header file.
  # This header file is automatically included above the first line of the
  # target source file.
  initial_header: "adlint_pinit.h"

  # Project specific additional include paths.
  # Ex.
  #   file_search_paths:
  #     - "include/foo"
  #     - "../include/bar"
  #     - "/opt/baz/include"
  file_search_paths:
      - "."
      - ".."
      - "../../../kernel"
      - "../../../kernel/default"
      - "/usr/lib/gcc/x86_64-linux-gnu/4.9.3/include"
  #
  # Project specific coding style section
  #
  coding_style:

    # Indent style which is a convention governing the identation of blocks.
    # Select from "K&R", "Allman" and "GNU".
    #
    # The value "K&R" means...
    #   int foo(int i)
    #   {
    #       if (i == 0) {
    #           return 0;
    #       }
    #       return i;
    #   }
    #
    # The value "Allman" means...
    #   int foo(int i)
    #   {
    #       if (i == 0)
    #       {
    #           return 0;
    #       }
    #       return i;
    #   }
    #
    # The value "GNU" means...
    #   int
    #   foo(int i)
    #   {
    #     if (i == 0)
    #       {
    #         return 0;
    #       }
    #     return i;
    #   }
    indent_style: "Allman"

    # Appearance width of a TAB character.
    tab_width: 8

    # Appearance width of 1-level of the indentation.
    indent_width: 4

  # Encoding of source files.
  file_encoding: "UTF-8"

#
# Compiler specific traits section
#
compiler_traits:

  # Pathname of the compiler specific initial header file.
  # This header file is automatically included above the first line of the
  # project specific initial header file.
  initial_header: "adlint_cinit.h"

  # Compiler specific include paths.
  # Ex.
  #   file_search_paths:
  #     - "/usr/include"
  #     - "/usr/local/include"
  file_search_paths:

  #
  # Compiler specific standard type section
  #
  standard_types:

    # Bit size of the `char' type family.
    char_size: 8
    # Bit size of the alignment of the `char' type family.
    char_alignment: 8

    # Bit size of the `short' type family.
    short_size: 16
    # Bit size of the alignment of the `short' type family.
    short_alignment: 16

    # Bit size of the `int' type family.
    int_size: 32
    # Bit size of the alignment of the `int' type family.
    int_alignment: 32

    # Bit size of the `long int' type family.
    long_size: 32
    # Bit size of the alignment of the `long int' type family.
    long_alignment: 32

    # Bit size of the `long long int' type family.
    long_long_size: 64
    # Bit size of the alignment of the `long long int' type family.
    long_long_alignment: 64

    # Bit size of the `float' type.
    float_size: 32
    # Bit size of the alignment of the `float' type.
    float_alignment: 32

    # Bit size of the `double' type.
    double_size: 64
    # Bit size of the alignment of the `double' type.
    double_alignment: 64

    # Bit size of the `long double' type.
    long_double_size: 96
    # Bit size of the alignment of the `long double' type.
    long_double_alignment: 96

    # Bit size of the pointer to functions.
    code_ptr_size: 32
    # Bit size of the alignment of the pointer to functions.
    code_ptr_alignment: 32

    # Bit size of the pointer to data.
    data_ptr_size: 32
    # Bit size of the alignment of the pointer to data.
    data_ptr_alignment: 32

    # Treat the `char' type as same as the `unsigned char' type?
    char_as_unsigned_char: true

  # Treat the `>>' operator as a logical shift, not an arithmetic shift?
  arithmetic:
    logical_right_shift: true

  # Max length of all symbols can be identified by the compiler.
  identifier_max: 128

  # Token substitution setting to warn the use of compiler specific extensions.
  #
  # If your compiler supports `__attribute__(...)' extension and you want to
  # know the use of this extension, specify as below.
  #   extension_substitutions:
  #     "__attribute__(__adlint__any)": ""
  # The token sequence consists of `__attribute__', `(', any kind of tokens,
  # `)' will be replaced with nothing (erased) after the preprocessing phase.
  # And this substitution will be warned by the message W0061.
  extension_substitutions:

  # Token substitution setting to silently ignore the use of compiler specific
  # extensions.
  #
  # If your compiler supports `__asm__ volatile (...)' extension and you do not
  # mind the use of this extension, specify as below.
  #   arbitrary_substitutions:
  #     "__asm__ __adlint__any(__adlint__any)": ""
  # The token sequence consists of `__asm__', any kind of tokens, `(', any kind
  # of tokens, `)' will be replaced with nothing (erased) silently after the
  # preprocessing phase.
  arbitrary_substitutions:
    "typeof": "__typeof__"
    "__typeof": "__typeof__"
    "alignof": "__alignof__"
    "__alignof": "__alignof__"

#
# Linker specific traits section
#
linker_traits:

  # Max length of external symbols can be identified by the linker.
  identifier_max: 128

  # Are external symbols identified without case by the linker?
  identifier_ignore_case: false

#
# Message traits section
#
message_traits:

  # Language of the message text.
  # Currently, "en_US" and "ja_JP" are supported.
  # Please help to translate the message catalog into your language.
  language: "en_US"

  # Enable inline annotation based message suppression?
  individual_suppression: true

  # Project-wide code check exclusion settings.
  # Ex.
  #   exclusion:
  #     categories:
  #       - "REL"
  #       - "PRT"
  #     severities: "[ABC][5-9][0-9]"
  #     messages:
  #       W0001: "c_builtin"
  #       W0002: "c_ansi"
  exclusion:
    messages:
      # pointer arithmetic and comparison
      W0023: "c_builtin"
      W0024: "c_builtin"
      W0027: "c_builtin"
      # include <bugurt,h>
      W0071: "c_builtin"
      # include <syscall_table,h>
      W0070: "c_builtin"
      W0076: "c_builtin"
      # (void)something
      W0076: "c_builtin"
      W0443: "c_builtin"
      W0100: "c_builtin"
      W0104: "c_builtin"
      W0105: "c_builtin"
      W0114: "c_builtin"
      # Drop bits
      W0116: "c_builtin"
      W0150: "c_builtin"
      W0246: "c_builtin"
      # W0422: "c_builtin"
      W0424: "c_builtin"
      W0442: "c_builtin"
      
      # unrecognized code
      W0478: "c_builtin"
      W0492: "c_builtin"
      W0549: "c_builtin"
      # implementation defined arithmetic
      W0572: "c_builtin"
      
      W0576: "c_builtin"
      W0511: "c_builtin"
      
      # func not used
      W0589: "c_builtin"
      W0591: "c_builtin"
      W0593: "c_builtin"
      W0628: "c_builtin"
      
      W0809: "c_builtin"
      # multiple return 
      W1071: "c_builtin"
      # static func with no prototype
      W1076: "c_builtin"
      W9003: "c_builtin"
  # Language of the 
  # Project-wide code check inclusion settings.
  # Ex.
  #   inclusion:
  #     messages:
  #       W0001: "c_builtin"
  #       W0002: "c_ansi"
  inclusion:
  # Message text replacement.
  # Ex.
  #   change_list:
  #     W9999:
  #       package: "c_builtin"
  #       classes:
  #         - "REL:A10"
  #         - "PRT:B20"
  #       format: "Your custom message for the warning of W9999."
  #     X9999:
  #       package: "core"
  #       classes:
  #         - "ERR:X99"
  #       format: "Your custom message for the warning of X9999."
  #     E9999:
  #       package: "core"
  #       classes:
  #         - "ERR:X99"
  #       format: "Your custom message for the warning of E9999."
  change_list:
